#Create Breakfast
def add_breakfast_item():
    measures,food_items,calories,proteins,fats,carbohydrates = functions.load_item_calorie_dict()
    key = breakfast_selectbox
    index = food_items.index(key)         
    calorie,measure,protein,fat,carbs = int(calories[index]), measures[index],int(proteins[index]),int(fats[index]),int(carbohydrates[index]) 
    fname = day_folder + os.sep + 'breakfast.txt'
    if not os.path.exists(fname):
        with open(fname, 'x') as f:
            pass
    with open(fname, 'a') as f:
        f.write(key + " :\n")
        quantity = float(st.session_state["breakfast_quantity"])
        if not isinstance(measure,int):
            measure_quantity = float(quantity) * float(measure.split()[0])
            measure_quantity = str(measure_quantity) + " " + measure.split()[1]
        else:
            measure_quantity = float(quantity) * float(measure)           
        f.write(f"Calories: {float(calorie)*quantity}, Measure: {measure_quantity}, Protein: {float(protein)*quantity}, Fats: {float(fat)*quantity}, Carbs: {float(carbs)*quantity}\n")
    st.session_state["breakfast_item"] = ""
    st.session_state['breakfast_quantity'] = ""

st.subheader("Breakfast:")
if os.path.exists(fpath + os.sep + 'breakfast.txt'):
    fname = open(fpath + os.sep + 'breakfast.txt')
    lines = fname.readlines()
    fname.close()
    title = ""
    calories = list()
    proteins = list()
    fats = list()
    carbs = list()
    for i,line in enumerate(lines):
        if not ':' in line:            
            st.subheader(line)
            title = line.lower().rstrip()
        else:
            if not "Calories" in line:
                checkbox = st.checkbox(line.split(':')[0],key = line.split(':')[0])
                if checkbox:  # If we check the checkbox it will be True
                    lines.pop(i+1)
                    lines.pop(i)
                    with open(fpath + os.sep + 'breakfast.txt', 'w') as f:
                        f.writelines(lines)
                    delete_item_from_meal('breakfast',line.split(':')[0])
                    del st.session_state[line.split(':')[0]]
                    st.experimental_rerun() # This clears the task once it is checked.
            else:
                st.write(line) 
                if 'Calories' in line:
                    values = line.split(',')
                    calories.append(float(values[0].split(':')[1]))
                    proteins.append(float(values[2].split(':')[1]))
                    fats.append(float(values[3].split(':')[1]))
                    carbs.append(float(values[4].split(':')[1]))
    st.write(f"Total Calories: {sum(calories)}, Total Proteins: {sum(proteins)}, Total Fats: {sum(fats)}, Total Carbs: {sum(carbs)}" + "\n\n")
    
col1, col2 = st.columns(2)
with col1:
    st.text_input(label="Add breakfast items:", placeholder="Enter breakfast item...", key='breakfast_item')
    if st.session_state['breakfast_item'] != "":  
        breakfast_item = st.session_state["breakfast_item"].lower()
        measures,food_items,calories,protein,fats,carbohydrates = functions.load_item_calorie_dict()
        match_items = list()
        for key in food_items:
            if breakfast_item in key:
                match_items.append(key)
        breakfast_selectbox = st.selectbox(label=f"Pick item which matches \"{breakfast_item}\":",key=f'select_index_{breakfast_item}',options=match_items)
with col2:
    st.text_input(label="Enter breakfast quantity:", placeholder="Enter breakfast quantity...", key='breakfast_quantity')
st.button("Add breakfast item", key="add_breakfast_item", on_click=add_breakfast_item)
if not functions.check_if_item_exists(st.session_state['breakfast_item'].lower()):
    st.info("Add single item/meal to the database.")